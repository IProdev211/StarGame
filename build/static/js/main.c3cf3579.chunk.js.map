{"version":3,"sources":["assets/ship.png","components/StarShip.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StarShip","ships","player","isTabletOrMobile","useMediaQuery","query","className","name","speed","src","ShipImg","alt","App","useState","availableShips","setAvailableShips","player1Ships","setPlayer1Ships","player2Ships","setPlayer2Ships","winner","setWinner","result","setResult","useEffect","a","starShips","nextUrl","fetch","fetchData","json","jsonData","concat","results","next","fetchShips","length","playGame","sleep","ms","Promise","resolve","setTimeout","round","ship1","ship2","shipsCount","randomID","parseInt","Math","random","max_atmosphering_speed","total1","map","s","reduce","b","total2","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3cf3579.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ship.be7def75.png\";","////\n// show each ship with the ship image and ship's round speed\n////\n\nimport React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport ShipImg from '../assets/ship.png';\nimport './StarShip.css'\n\nconst StarShip = ({ ships, player })  => {\n\n  // availalbe in mobile or tablet\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' })\n\n  return (\n    <div className='ShipContainer'>\n      <div className='RoundSpeed'>\n        <p className={isTabletOrMobile ? 'MobileRoundText' : 'RoundText'}>{ships && ships[0] ? `Round 1: ${ships[0].name} - ${ships[0].speed}km` : ''}</p>\n        <p className={isTabletOrMobile ? 'MobileRoundText' : 'RoundText'}>{ships && ships[1] ? `Round 2: ${ships[1].name} - ${ships[1].speed}km` : ''}</p>\n        <p className={isTabletOrMobile ? 'MobileRoundText' : 'RoundText'}>{ships && ships[2] ? `Round 3: ${ships[2].name} - ${ships[2].speed}km` : ''}</p>\n      </div>\n      <div className='ShipContainer'>\n        <img src={ShipImg} className={isTabletOrMobile ? 'MobileShipImage' : 'ShipImage'} alt='Ship' />\n        <p className={isTabletOrMobile ? 'MobileRoundText' : 'RoundText'}>{player}</p>\n      </div>\n    </div>\n  )\n}\n\n\nexport default StarShip;","import React, { useState, useEffect } from 'react';\nimport StarShip from './components/StarShip';\nimport { useMediaQuery } from 'react-responsive';\nimport './App.css';\n\nconst STARSHIP_API = 'https://swapi.dev/api/starships/';\nconst ROUND_COUNT = 3;\n\nfunction App() {\n  const [availableShips, setAvailableShips] = useState([]);\n  const [player1Ships, setPlayer1Ships] = useState([]);\n  const [player2Ships, setPlayer2Ships] = useState([]);\n  const [winner, setWinner] = useState('');\n  const [result, setResult] = useState('');\n\n  useEffect(() => {\n    async function fetchShips() {\n      // fetch available star ships\n      let starShips = [];\n      let nextUrl = STARSHIP_API;\n      \n      while (nextUrl) {\n        const fetchData = await fetch(nextUrl);\n        const jsonData = await fetchData.json();\n        starShips = starShips.concat(jsonData.results);\n        nextUrl = jsonData.next;\n      }\n      setAvailableShips(starShips)\n    }\n    fetchShips();\n  }, [])\n\n  useEffect(() => {\n    if (availableShips.length > 0) {\n      playGame()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [availableShips])\n\n  const sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const playGame = async () => {\n    // main game\n    // generate random speeds for each ships\n    let round = 0;\n    let ship1 = [];\n    let ship2 = [];\n    setWinner('');\n    setResult('');\n    const shipsCount = availableShips.length;\n\n    while(round < ROUND_COUNT) {\n      while(!ship1[round] || !ship2[round] || !ship1[round].speed || !ship2[round].speed) {\n        if (!ship1[round] || !ship1[round].speed) {\n          let randomID = parseInt(Math.random() * 100 % shipsCount);\n          ship1[round] = {\n            name: availableShips[randomID].name,\n            speed: parseInt(availableShips[randomID].max_atmosphering_speed)\n          }\n        }\n\n        if (!ship2[round] || !ship2[round].speed) {\n          let randomID = parseInt(Math.random() * 100 % shipsCount);\n          ship2[round] = {\n            name: availableShips[randomID].name,\n            speed: parseInt(availableShips[randomID].max_atmosphering_speed)\n          }\n        }\n      }\n\n      setPlayer1Ships([...ship1]);\n      setPlayer2Ships([...ship2]);\n      if (round < 2)\n        await sleep(500);\n\n      round ++;\n    }\n\n    // get the winner of game\n    const total1 = ship1.map(s => s.speed).reduce((a, b) => a + b, 0);\n    const total2 = ship2.map(s => s.speed).reduce((a, b) => a + b, 0);\n    if (total1 > total2) {\n      setResult('WINNER')\n      setWinner('Luke');\n    } else if (total1 === total2) {\n      setResult('DRAW')\n      setWinner('');\n    } else {\n      setResult('WINNER')\n      setWinner('Han');\n    }\n  }\n    \n  // Available in mobile or tablet\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' });\n\n  return (\n    <div className=\"App\">\n      <div className='firstStarShip'>\n        <StarShip ships={player1Ships} player='Luke' />\n      </div>\n      <div className='resultContainer'>\n        <div className={isTabletOrMobile ? 'mobileWinnerContainer' : 'winnerContainer'}>\n          <span className={isTabletOrMobile ? 'mobileWinText' : 'winText'}>{result}</span>\n          <span className={isTabletOrMobile ? 'mobileWinText' : 'winText'}>{winner}</span>\n        </div>\n        <div className={isTabletOrMobile ? 'mobileNewGameBtnContainer' : 'newGameBtnContainer'}>\n          <button\n            className={isTabletOrMobile ? 'mobileNewGameBtn' : 'newGameBtn'}\n            onClick = {() => {\n              playGame()\n            }}\n          >\n            New Game\n          </button>\n        </div>\n      </div>\n      <div className='secondStarShip'>\n        <StarShip ships={player2Ships} player='Han' />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}